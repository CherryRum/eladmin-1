#配置数据源
spring:
  shardingsphere:
    # 模式配置
    mode:
      type: Standalone # 运行模式类型。可选配置：Standalone、Cluster
      repository:
        #type: File # 持久化仓库类型, File类型需自行实现好像
        #props:
        #<key>= # 持久化仓库所需属性
        #  path: .shardingsphere
        type: JDBC
        # 下面几个都是默认值
        #props:
        #  provider: H2
        #  jdbc_url: jdbc:h2:mem:config;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MYSQL
        #  username: sa
        #  password:
      overwrite: false # 是否使用本地配置覆盖持久化配置

    datasource:
      names: write-ds,read-ds-0,read-ds-1
      # 主数据源
      write-ds:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
        jdbc-url: jdbc:log4jdbc:mysql://${DB_HOST:10.211.55.140}:${DB_PORT:3306}/${DB_NAME:eladmin}?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
        username: ${DB_USER:root}
        password: ${DB_PWD:root}
        pool-name: WriteDBP

      # 分数据源
      read-ds-0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
        jdbc-url: jdbc:log4jdbc:mysql://${DB_HOST:10.211.55.140}:${DB_PORT:3308}/${DB_NAME:eladmin}?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
        # 从库改用只读账号
        username: ${DB_USER:reader}
        password: ${DB_PWD:123456}
        pool-name: ReadDBP_0
      # 分数据源
      read-ds-1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
        jdbc-url: jdbc:log4jdbc:mysql://${DB_HOST:10.211.55.140}:${DB_PORT:3310}/${DB_NAME:eladmin}?serverTimezone=Asia/Shanghai&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
        # 从库改用只读账号
        username: ${DB_USER:reader}
        password: ${DB_PWD:123456}
        pool-name: ReadDBP_1
    # 主从配置
    # 读写分离参考: https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/
    #spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.static-strategy.write-data-source-name= # 写库数据源名称
    #spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.static-strategy.read-data-source-names= # 读库数据源列表，多个从数据源用逗号分隔
    #spring.shardingsphere.rules.readwrite-splitting.data-sources.<readwrite-splitting-data-source-name>.load-balancer-name= # 负载均衡算法名称
    # 负载均衡算法配置
    #spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.type= # 负载均衡算法类型
    #spring.shardingsphere.rules.readwrite-splitting.load-balancers.<load-balance-algorithm-name>.props.xxx= # 负载均衡算法属性配置
    rules:
      # 这里指定了规则，读写分离
      readwrite-splitting:
        data-sources:
          # 这个readwrite_ds不要漏了。
          # <data-source-name> (+): # 读写分离逻辑数据源名称
          readwrite_ds:
            static-strategy:
              write-data-source-name: write-ds #主库数据源名称
              read-data-source-names: read-ds-0,read-ds-1 # 从库数据源名称

            load-balancer-name: round_robin # 负载均衡算法名称
        # 负载均衡算法配置
        #https://shardingsphere.apache.org/document/current/cn/user-manual/common-config/builtin-algorithm/load-balance/
        #ROUND_ROBIN：事务内，读请求路由到 primary，事务外，采用轮询策略路由到 replica。所以之前读写分离未生效是因为算法的问题
        #TRANSACTION_ROUND_ROBIN：显示/非显示开启事务，读请求采用轮询策略路由到多个 replica。
        load-balancers:
          # <load-balancer-name> (+): # 负载均衡算法名称
          round_robin:
            type: TRANSACTION_ROUND_ROBIN # 负载均衡算法类型
          #  props: # 负载均衡算法属性配置

    props:
      sql:
        show：true

  # cache配置
  cache:
    type: redis
  # redis配置
  redis:
    #详细版的redisson配置可参考：https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter
    # Connection URL, will override host, port and password (user will be ignored), e.g. redis://user:password@example.com:6379
    #    url: redis://10.211.55.140:6379
    #    timeout: 2000 # 连接或读取超时时长（毫秒）
    #    database: 0
    redisson:
      file: classpath:redisson.yaml
  #    jedis:
  #      pool:
  #        max-active: 10  # 连接池最大连接数（使用负值表示没有限制）
  #        max-wait: 800 # 连接池最大阻塞等待时间（使用负值表示没有限制）
  #        max-idle: 5 # 连接池中的最大空闲连接
  #        min-idle: 2 # 连接池中的最小空闲连接

  ##### RabbitMQ ####
  rabbitmq:
    #    RabbitMQ集群，通过addresses配置，多个以逗号分隔(优先取addresses，然后再取host)
    addresses: 10.211.55.140:5672,10.211.55.140:5674
    #    host: 10.211.55.140 # rabbitmq的连接地址
    #    port: 5672 # rabbitmq的连接端口号
    virtual-host: /eladmin # rabbitmq的虚拟host
    username: admin # rabbitmq的用户名
    password: admin # rabbitmq的密码
    ####开始消费最大重试次数，避免一直重复消费的问题
    listener:
      simple:
        concurrency: 1 # Minimum number of consumers.
        max-concurrency: 20 # Maximum number of consumers.
        prefetch: 50
        default-requeue-rejected: true #意思是，消息被拒后（即未消费），重新（true）放入队列
        retry:
          enabled: true #是否开启消费者重试（为false时关闭消费者重试，这时消费端代码异常会一直重复收到消息）
          max-attempts: 3 #最大重试次数
          initial-interval: 5000ms
  ##### 邮箱配置
  mail:
    host: xxx.com #SMTP server host
    username: xxx #login user
    password: xxx #login password
    properties:
      from: xxx@xxx.com #发件人（邮箱）
      to-dev: xxx@oo.com #信息默认接收人（邮箱）

  servlet:
    multipart:
      max-file-size: 20MB #限制单个文件大小
      max-request-size: 50MB #限制请求总量

#jwt
jwt:
  #  header: Authorization
  # 令牌前缀
  #  token-start-with: Bearer
  # 必须使用最少88位的Base64对该令牌进行编码
  base64-secret: ZmQ0ZGI5NjQ0MDQwY2I4MjMxY2Y3ZmI3MjdhN2ZmMjNhODViOTg1ZGE0NTBjMGM4NDA5NzYxMjdjOWMwYWRmZTBlZjlhNGY3ZTg4Y2U3YTE1ODVkZDU5Y2Y3OGYwZWE1NzUzNWQ2YjFjZDc0NGMxZWU2MmQ3MjY1NzJmNTE0MzI=
  # 令牌过期时间 此处单位/秒 ，默认2小时，可在此网站生成 https://www.convertworld.com/zh-hans/time/milliseconds.html
  #  token-validity-in-seconds: 7200

# ===== SpringDoc配置 ===== #
springdoc:
  swagger-ui:
    # 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html
    path: /swagger-ui.html

    # 字符串类型，一共三个值来控制操作和标记的默认展开设置。它可以是“list”（仅展开标记）、“full”（展开标记和操作）或“none”（不展开任何内容）。
    docExpansion: none

    # 布尔值。控制“试用”请求的请求持续时间（毫秒）的显示。
    displayRequestDuration: true

    # 布尔值。控制供应商扩展（x-）字段和操作、参数和架构值的显示。
    showExtensions: true

    # 布尔值。控制参数的扩展名（pattern、maxLength、minLength、maximum、minminimum）字段和值的显示。
    showCommonExtensions: true

    # 布尔值。禁用swagger用户界面默认petstore url。（从v1.4.1开始提供）。
    disable-swagger-default-url: true

  api-docs:
    # enabled the /v3/api-docs endpoint
    enabled: true

    # 自定义的文档api元数据访问路径。默认访问路径是/v3/api-docs
    path: /v3/api-docs

    # 布尔值。在@Schema（名称name、标题title和说明description，三个属性）上启用属性解析程序。
    resolve-schema-properties: true

  # 布尔值。实现OpenApi规范的打印。
  writer-with-default-pretty-printer: true
  #  https://springdoc.org/faq.html#how-can-i-map-pageable-spring-date-commons-object-to-correct-url-parameter-in-swagger-ui
  #  当前未生效
  model-converters:
    pageable-converter:
      enabled: true

# ===== 自定义swagger配置 ===== #
swagger:
  application-name: ${spring.application.name}
  application-version: 3.3.0
  application-description: 1101100_1010111_1101111_1001000_1110110_1011001_1100101
  try-host: http://localhost:${server.port}

#是否允许生成代码，生产环境设置为false
generator:
  enabled: false

# 滑动验证码
aj:
  captcha:
    cache-type: redis

# IP 本地解析
ip:
  local-parsing: true


# 文件存储路径
file:
  mac:
    path: ~/file/
    avatar: ~/avatar/
  linux:
    path: /home/eladmin/file/
    avatar: /home/eladmin/avatar/
  windows:
    path: C:\eladmin\file\
    avatar: C:\eladmin\avatar\
  # 文件大小 /M
#  maxSize: 100
#  avatarMaxSize: 5


# oss配置
alibaba:
  cloud:
    access-key: xx
    secret-key: xx
    oss:
      endpoint: xx
      # 自定义属性 bucketName
      bucket-name: xx
      # 自定义属性 filePath
      file-path: xx/xx/
